name: Linting, Testin, Deploy dev
on:
  push:
    branches:  
      - dev
    paths-ignore:
      - README.md
      - CHANGELOG.md # Should never be edited anyway
      - .gitignore

env:
  PROJECT_ID: programmierprojekt-397609 # TODO: update Google Cloud project id
  GAR_LOCATION: europe-west1 # TODO: update Artifact Registry location
  SERVICE: kmeans-backend-dev # TODO: update Cloud Run service name
  REGION: europe-west1 # TODO: update Cloud Run service region.

jobs:
  linting_testing_deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10"]

    services:
      redis:
        image: redis/redis-stack-server:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install pytest
          pip install httpx
          pip install -r requirements.txt
          
      - name: Analysing the code with pylint
        run: |
          python -m pylint app tests

      - name: Unittesting code
        run: |
          python -m pytest --cov=app --cov-report html:coverage-report tests
    
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
            name: coverage
            path: coverage-report
          
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: |
            --port=5000
            --vpc-connector=kmeans-vpc-connector
          env_vars: |
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
